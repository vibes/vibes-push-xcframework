#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef VIBESPUSH_SWIFT_H
#define VIBESPUSH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VibesPush",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class LogObject;
@class NSURLRequest;
@class NSURLResponse;
@class NSData;

/// A protocol for logging the Vibes SDKâ€™s HTTP-related logs
SWIFT_PROTOCOL("_TtP9VibesPush11VibesLogger_")
@protocol VibesLogger
/// Logs a message to the logger if the <code>logObject.level</code> matches or is above the configured log <code>level</code>
/// \param logObject The Log object with  log <code>level</code> and specified log <code>message</code>.
///
- (void)log:(LogObject * _Nonnull)logObject;
/// Logs an HTTP request.
/// \param request the HTTP request to log
///
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
/// Logs an HTTP response with its accompanying data.
/// \param response the HTTP response to log
///
/// \param data the data received, if any
///
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
/// Logs an error.
/// \param error the error that occurred
///
- (void)logWithError:(NSError * _Nonnull)error;
@end


/// A Logger that writes to the <code>ConsoleLogger</code> if enabled, as well as to any custom Logger provider to <code>VibesConfigration</code> during init.
SWIFT_CLASS("_TtC9VibesPush14CombinedLogger")
@interface CombinedLogger : NSObject <VibesLogger>
/// Logs a message to the console if the <code>logObject.level</code> matches or is above the configured log <code>level</code>
/// \param logObject The Log object with  log <code>level</code> and specified log <code>message</code>.
///
- (void)log:(LogObject * _Nonnull)logObject;
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
- (void)logWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A simple Logger that writes to the Xcode console.
SWIFT_CLASS("_TtC9VibesPush13ConsoleLogger")
@interface ConsoleLogger : NSObject <VibesLogger>
/// Logs a message to the console if the <code>logObject.level</code> matches or is above the configured log <code>level</code>
/// \param logObject The Log object with  log <code>level</code> and specified log <code>message</code>.
///
- (void)log:(LogObject * _Nonnull)logObject;
/// Logs an HTTP request to the console.
/// \param request the HTTP request to log
///
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
/// Logs an HTTP response with its accompanying data to the console.
/// \param response the HTTP response to log
///
/// \param data the data received, if any
///
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
/// Logs an error the console.
/// \param error the error that occurred
///
- (void)logWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSString;
@class NSDate;

/// Inbox Message Model
SWIFT_CLASS("_TtC9VibesPush12InboxMessage")
@interface InboxMessage : NSObject
/// Local Atrributes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (NSDictionary<NSString *, id> * _Nonnull)encodeJSON SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
/// Main Image for this inbox message
@property (nonatomic, readonly, copy) NSString * _Nullable mainImage;
/// Icon image for this push message
@property (nonatomic, readonly, copy) NSString * _Nullable iconImage;
/// Inbox message uid
@property (nonatomic, readonly, copy) NSString * _Nullable inboxMessageUID;
/// An uniqie identifier assosiated with the message
@property (nonatomic, readonly, copy) NSString * _Null_unspecified messageUID;
/// The collapse key
@property (nonatomic, readonly, copy) NSString * _Nullable collapseKey;
/// The subject of the message
@property (nonatomic, copy) NSString * _Nullable subject;
/// A message content
@property (nonatomic, copy) NSString * _Null_unspecified content;
/// Some details for this message, Currently this is the media URL
@property (nonatomic, readonly, copy) NSString * _Nullable detail;
/// If the message is read
@property (nonatomic) BOOL read;
/// images details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull images;
/// inbox custom data details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull inboxCustomData;
/// client app data details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull clientAppData;
/// Appref data details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull apprefData;
/// When the message expires
@property (nonatomic, copy) NSDate * _Nullable expiresAt;
/// When the message was created
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end



/// A simple enum for specifying desired log level
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// All requests and their info (endpoint, header, body, etc.), and errors
  LogLevelVerbose = 0,
/// Request method and endpoint, and errors
  LogLevelInfo = 1,
/// Only errors
  LogLevelError = 2,
};


/// Log Object with log <code>level</code> and <code>message</code>
SWIFT_CLASS("_TtC9VibesPush9LogObject")
@interface LogObject : NSObject
/// The Log leve
@property (nonatomic, readonly) enum LogLevel level;
/// The log message
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VibesPush6Person")
@interface Person : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// An external identifier assosiated with the device or person if available
@property (nonatomic, copy) NSString * _Nullable externalPersonId;
/// The phone number of the assosiated person if available
@property (nonatomic, copy) NSString * _Nullable mdn;
/// A unique identifier for the person, provided by Vibes when  assosiated.
@property (nonatomic, copy) NSString * _Nullable personKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC9VibesPush7Product")
@interface Product : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable brand;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSString * _Nullable variant;
@property (nonatomic, copy) NSString * _Nullable quantity;
@property (nonatomic, copy) NSString * _Nullable coupon;
@property (nonatomic, copy) NSString * _Nullable position;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize for testing
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id price:(double)price name:(NSString * _Nonnull)name brand:(NSString * _Nonnull)brand category:(NSString * _Nonnull)category variant:(NSString * _Nonnull)variant quantity:(NSString * _Nonnull)quantity coupon:(NSString * _Nonnull)coupon position:(NSString * _Nonnull)position OBJC_DESIGNATED_INITIALIZER;
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC9VibesPush8Purchase")
@interface Purchase : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable affiliation;
@property (nonatomic, copy) NSString * _Nullable list;
@property (nonatomic, copy) NSString * _Nullable step;
@property (nonatomic, copy) NSString * _Nullable option;
@property (nonatomic, copy) NSArray<Product *> * _Nullable products;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize for testing
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id affiliation:(NSString * _Nonnull)affiliation revenue:(double)revenue tax:(double)tax shipping:(double)shipping coupon:(double)coupon list:(NSString * _Nonnull)list step:(NSString * _Nonnull)step option:(NSString * _Nonnull)option products:(NSArray<Product *> * _Nonnull)products OBJC_DESIGNATED_INITIALIZER;
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end

typedef SWIFT_ENUM(NSInteger, TrackedEventType, open) {
/// Undefined case, since we parse a string in the convert method
  TrackedEventTypeUndefined = 0,
/// A launch event, tracked when the app is first opened
  TrackedEventTypeLaunch = 1,
/// A clickthru event, tracked when the app is opened from a push
/// notification
  TrackedEventTypeClickthru = 2,
  TrackedEventTypeInboxopen = 3,
  TrackedEventTypeInboxfetch = 4,
};



@protocol VibesAPIDelegate;
@class NSNumber;
@class VibesAppInfo;

/// The main entry point for usage of the Vibes API.
SWIFT_CLASS("_TtC9VibesPush5Vibes")
@interface Vibes : NSObject
/// List of Vibes delegates
@property (nonatomic, weak) id <VibesAPIDelegate> _Nullable delegate;
/// The shared (singleton) instance of Vibes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Vibes * _Null_unspecified shared;)
+ (Vibes * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// The currently set push token, if available. This is stored in local
/// storage.
@property (nonatomic, readonly, copy) NSString * _Nullable pushToken;
/// Add a new Vibes delegate to the list of current delegates.
/// \param delegate VibesAPIDelegate
///
- (void)setWithDelegate:(id <VibesAPIDelegate> _Nonnull)delegate;
/// Enables register push
/// This will result in sending the APNS token to our servers whenever it changes
- (void)enablePush;
/// Disable register push
/// This will result in NOT sending the APNS token to our servers whenever it changes.
/// By calling this, it will be up to the app developer to call registerPush() when appropriate.
- (void)disablePush;
/// Get the status of the device registration
///
/// returns:
/// Boolean
- (BOOL)isDeviceRegistered SWIFT_WARN_UNUSED_RESULT;
/// Get the status of the device push registration
///
/// returns:
/// Boolean
- (BOOL)isDevicePushRegistered SWIFT_WARN_UNUSED_RESULT;
/// Parses the push token from the Data that Apple sends, and stores it
/// locally by converting the data to a hex string. Once this has been called,
/// <code>registerPush</code> can be called at will to enable push notifications from
/// Vibes.
/// \param fromData the data send from Apple and received in your AppDelegateâ€™s
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken</code> function.
///
- (void)setPushTokenFromData:(NSData * _Nonnull)data;
/// Notify Vibes that a push message has been tapped on or for the case of silent push, has been received.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     userInfo: the details from the remote notification
///   </li>
///   <li>
///     timestamp: an optional date for the receipt of the push notification
///     (default: now)
///   </li>
/// </ul>
- (void)receivedPushWith:(NSDictionary * _Nonnull)userInfo at:(NSDate * _Nonnull)timestamp;
/// Registers this device with Vibes.
- (void)registerDevice;
/// Unregisters this device with Vibes.
- (void)unregisterDevice;
/// Updates this device with Vibes.
/// \param lat latitude of the User location.
///
/// \param long longitude of the User location
///
/// \param updateCredentials a boolean indicating if itâ€™s a token update or device info update.  Specify <code>false</code> if not certain
///
- (void)updateDeviceWithLat:(NSNumber * _Nullable)lat long:(NSNumber * _Nullable)long_ updateCredentials:(BOOL)updateCredentials;
/// Associate this device with a person
/// <ul>
///   <li>
///     paramters:
///     <ul>
///       <li>
///         externalPersonId: the third party identifier for the person, stored
///         by vibes as external_person_id
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)associatePersonWithExternalPersonId:(NSString * _Nonnull)externalPersonId;
/// Register push notifications for this device with Vibes.
- (void)registerPush;
/// Unregister push notifications for this device with Vibes.
- (void)unregisterPush;
/// Get Vibes Person Information.
/// \param callback GetPersonCallback (Person?, Error?)
///
- (void)getPerson:(void (^ _Nullable)(Person * _Nullable, NSError * _Nullable))callback;
/// Retrieve inbox messages status for an app
/// \param callback GetVibesAppInfoCallback (Status, Error?)
///
- (void)getAppInfo:(void (^ _Nullable)(VibesAppInfo * _Nullable, NSError * _Nullable))callback;
/// Retrieve inbox messages for a Person
/// \param callback GetInboxMessagesCallback ([InboxMessage], Error?)
///
- (void)fetchInboxMessages:(void (^ _Nullable)(NSArray<InboxMessage *> * _Nonnull, NSError * _Nullable))callback;
/// Retrieve a single  inbox message for a Person
/// \param messageUID unique UID for the message to be edited
///
/// \param callback GetInboxMessageCallback (InboxMessage, Error?)
///
- (void)fetchInboxMessageWithMessageUID:(NSString * _Nonnull)messageUID :(void (^ _Nonnull)(InboxMessage * _Nullable, NSError * _Nullable))callback;
/// Mark inbox message as read
/// \param messageUID unique UID for the message to be edited
///
/// \param callback UpdateMessageCallback (InboxMessage?, Error?)
///
- (void)markInboxMessageAsReadWithMessageUID:(NSString * _Nonnull)messageUID :(void (^ _Nonnull)(InboxMessage * _Nullable, NSError * _Nullable))callback;
/// Expire inbox message at specified date
/// \param messageUID unique UID for the message to be edited
///
/// \param date The date to expire the inbox message. if not set, defaults to now.
///
/// \param callback UpdateMessageCallback (InboxMessage?, Error?)
///
- (void)expireInboxMessageWithMessageUID:(NSString * _Nonnull)messageUID date:(NSDate * _Nonnull)date :(void (^ _Nonnull)(InboxMessage * _Nullable, NSError * _Nullable))callback;
/// Records the fact that an inbox message has been viewed in detail by the user.
/// \param inboxMessage The viewed inbox message
///
- (void)onInboxMessageOpenWithInboxMessage:(InboxMessage * _Nonnull)inboxMessage;
/// Records the fact that an inbox messages have been fetched by the user.
- (void)onInboxMessagesFetched;
/// Track CLICK Product Action
/// \param product the product being tracked
///
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackClickWithProduct:(Product * _Nonnull)product activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Track ADD Product Action
/// \param product the product being tracked
///
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackAddWithProduct:(Product * _Nonnull)product activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Track Detail
/// \param product the product being tracked
///
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackDetailWithProduct:(Product * _Nonnull)product activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Get Tracking Data
///
/// returns:
/// VibesTrackingData
- (NSDictionary<NSString *, id> * _Nullable)getTrackingData SWIFT_WARN_UNUSED_RESULT;
/// Track PURCHASE Product Action
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackPurchaseWithPurchase:(Purchase * _Nonnull)purchase activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VibesConfiguration;

@interface Vibes (SWIFT_EXTENSION(VibesPush))
/// Configure the shared Vibes instance. This must be called before using any
/// of the functionality of Vibes, like registering your device.
/// \param appId The Vibes App ID
///
/// \param configuration Contains all the properties to configure Vibes
///
+ (void)configureWithAppId:(NSString * _Nonnull)appId configuration:(VibesConfiguration * _Nullable)configuration;
@end


SWIFT_PROTOCOL("_TtP9VibesPush16VibesAPIDelegate_")
@protocol VibesAPIDelegate
@optional
/// Callback to inform SDK users of the result of the device registration
/// \param deviceId the vibes device id that uniquely identifies the registered device
///
/// \param error Registration device error
///
- (void)didRegisterDeviceWithDeviceId:(NSString * _Nullable)deviceId error:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device unregistration
/// \param error Unregistration device error
///
- (void)didUnregisterDeviceWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device push registration
/// \param error Push registration error
///
- (void)didRegisterPushWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device push unregistration
/// \param error Push unregistration error
///
- (void)didUnregisterPushWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device update
/// \param error Device update error
///
- (void)didUpdateDeviceWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of associating a person with this device
/// \param error Associate person error
///
- (void)didAssociatePersonWithError:(NSError * _Nullable)error;
@end


/// Vibes App Info
SWIFT_CLASS("_TtC9VibesPush12VibesAppInfo")
@interface VibesAppInfo : NSObject
/// Local Atrributes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (NSDictionary<NSString *, id> * _Nonnull)encodeJSON SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
/// An uniqie identifier assosiated with the app
@property (nonatomic, readonly, copy) NSString * _Null_unspecified appId;
/// The app inbox status
@property (nonatomic, readonly) BOOL inboxEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end

enum VibesStorageEnum : NSInteger;
@class NSURL;

SWIFT_CLASS("_TtC9VibesPush18VibesConfiguration")
@interface VibesConfiguration : NSObject
/// A unique advertising identifier for this device
@property (nonatomic, copy) NSString * _Nullable advertisingId;
/// The default URL to hit when talking to the Vibes API
@property (nonatomic, readonly, copy) NSString * _Nonnull apiUrl;
/// The default tracking URL to hit when talking to the Vibes API
@property (nonatomic, copy) NSString * _Nonnull trackingApiUrl;
/// The logger to use.
@property (nonatomic, strong) CombinedLogger * _Nullable logger;
/// Storage to store credential
@property (nonatomic, readonly) enum VibesStorageEnum storageType;
/// Array for Objc interoperability , type of tracking
@property (nonatomic, strong) NSArray * _Nonnull trackedEventTypes;
@property (nonatomic, readonly, copy) NSURL * _Nonnull vibesAPIURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull vibesTrackingAPIURL;
/// Enable Developer Logging which will print logs to the console.
/// \param level The minimum Log level, Default is <code>.verbose</code>
///
- (void)enableDevLoggingWithLevel:(enum LogLevel)level;
/// Disable Developer Logging
- (void)disableDevLogging;
/// Configure paramenters for Vibes instance.
/// \param advertisingId AdSupport.advertisingId. If the application doesnâ€™t
/// support it nil will be sent as value to the backend.
///
/// \param apiUrl An optional URL to hit for accessing for the Vibes API; if not
/// present, the staging URL will be used.
///
/// \param trackingApiUrl An optional URL to hit for accessing for the Vibes Tracking API ; if not
/// present, the staging URL will be used.
///
/// \param logger The logger to use, in addition to<code>ConsoleLogger</code>. if enabled.
/// You can enable console logging with <code>Vibes.shared.configuration.enableDevLogging()</code>
/// and disable with <code>Vibes.shared.configuration.disableDevLogging()</code> at any point.
///
/// \param storageType define the type of storage for storing data locally; if not
/// present, data will be securely stored in the Keychain.
///
/// \param trackedEventTypes NSArray for Objc interoperability , type of tracking
/// events sent to Vibes; if not present, all events type (<code>.launch</code>,
/// <code>.clickthru</code> e.t.c) will be monitored.
///
- (nonnull instancetype)initWithAdvertisingId:(NSString * _Nullable)advertisingId apiUrl:(NSString * _Nullable)apiUrl trackingApiUrl:(NSString * _Nullable)trackingApiUrl logger:(id <VibesLogger> _Nullable)logger storageType:(enum VibesStorageEnum)storageType trackedEventTypes:(NSArray * _Nonnull)trackedEventTypes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Type of storage to store credential
typedef SWIFT_ENUM(NSInteger, VibesStorageEnum, open) {
  VibesStorageEnumKEYCHAIN = 0,
  VibesStorageEnumUSERDEFAULTS = 1,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef VIBESPUSH_SWIFT_H
#define VIBESPUSH_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VibesPush",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class LogObject;
@class NSURLRequest;
@class NSURLResponse;
@class NSData;

/// A protocol for logging the Vibes SDKâ€™s HTTP-related logs
SWIFT_PROTOCOL("_TtP9VibesPush11VibesLogger_")
@protocol VibesLogger
/// Logs a message to the logger if the <code>logObject.level</code> matches or is above the configured log <code>level</code>
/// \param logObject The Log object with  log <code>level</code> and specified log <code>message</code>.
///
- (void)log:(LogObject * _Nonnull)logObject;
/// Logs an HTTP request.
/// \param request the HTTP request to log
///
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
/// Logs an HTTP response with its accompanying data.
/// \param response the HTTP response to log
///
/// \param data the data received, if any
///
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
/// Logs an error.
/// \param error the error that occurred
///
- (void)logWithError:(NSError * _Nonnull)error;
@end


/// A Logger that writes to the <code>ConsoleLogger</code> if enabled, as well as to any custom Logger provider to <code>VibesConfigration</code> during init.
SWIFT_CLASS("_TtC9VibesPush14CombinedLogger")
@interface CombinedLogger : NSObject <VibesLogger>
/// Logs a message to the console if the <code>logObject.level</code> matches or is above the configured log <code>level</code>
/// \param logObject The Log object with  log <code>level</code> and specified log <code>message</code>.
///
- (void)log:(LogObject * _Nonnull)logObject;
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
- (void)logWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A simple Logger that writes to the Xcode console.
SWIFT_CLASS("_TtC9VibesPush13ConsoleLogger")
@interface ConsoleLogger : NSObject <VibesLogger>
/// Logs a message to the console if the <code>logObject.level</code> matches or is above the configured log <code>level</code>
/// \param logObject The Log object with  log <code>level</code> and specified log <code>message</code>.
///
- (void)log:(LogObject * _Nonnull)logObject;
/// Logs an HTTP request to the console.
/// \param request the HTTP request to log
///
- (void)logWithRequest:(NSURLRequest * _Nonnull)request;
/// Logs an HTTP response with its accompanying data to the console.
/// \param response the HTTP response to log
///
/// \param data the data received, if any
///
- (void)logWithResponse:(NSURLResponse * _Nonnull)response data:(NSData * _Nullable)data;
/// Logs an error the console.
/// \param error the error that occurred
///
- (void)logWithError:(NSError * _Nonnull)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSString;
@class NSDate;

/// Inbox Message Model
SWIFT_CLASS("_TtC9VibesPush12InboxMessage")
@interface InboxMessage : NSObject
/// Local Atrributes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (NSDictionary<NSString *, id> * _Nonnull)encodeJSON SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
/// Main Image for this inbox message
@property (nonatomic, readonly, copy) NSString * _Nullable mainImage;
/// Icon image for this push message
@property (nonatomic, readonly, copy) NSString * _Nullable iconImage;
/// Inbox message uid
@property (nonatomic, readonly, copy) NSString * _Nullable inboxMessageUID;
/// An uniqie identifier assosiated with the message
@property (nonatomic, readonly, copy) NSString * _Null_unspecified messageUID;
/// The collapse key
@property (nonatomic, readonly, copy) NSString * _Nullable collapseKey;
/// The subject of the message
@property (nonatomic, copy) NSString * _Nullable subject;
/// A message content
@property (nonatomic, copy) NSString * _Null_unspecified content;
/// Some details for this message, Currently this is the media URL
@property (nonatomic, readonly, copy) NSString * _Nullable detail;
/// If the message is read
@property (nonatomic) BOOL read;
/// images details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull images;
/// inbox custom data details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull inboxCustomData;
/// client app data details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull clientAppData;
/// Appref data details for this message
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull apprefData;
/// When the message expires
@property (nonatomic, copy) NSDate * _Nullable expiresAt;
/// When the message was created
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end



/// A simple enum for specifying desired log level
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// All requests and their info (endpoint, header, body, etc.), and errors
  LogLevelVerbose = 0,
/// Request method and endpoint, and errors
  LogLevelInfo = 1,
/// Only errors
  LogLevelError = 2,
};


/// Log Object with log <code>level</code> and <code>message</code>
SWIFT_CLASS("_TtC9VibesPush9LogObject")
@interface LogObject : NSObject
/// The Log leve
@property (nonatomic, readonly) enum LogLevel level;
/// The log message
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC9VibesPush6Person")
@interface Person : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
/// An external identifier assosiated with the device or person if available
@property (nonatomic, copy) NSString * _Nullable externalPersonId;
/// The phone number of the assosiated person if available
@property (nonatomic, copy) NSString * _Nullable mdn;
/// A unique identifier for the person, provided by Vibes when  assosiated.
@property (nonatomic, copy) NSString * _Nullable personKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC9VibesPush7Product")
@interface Product : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nullable brand;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSString * _Nullable variant;
@property (nonatomic, copy) NSString * _Nullable quantity;
@property (nonatomic, copy) NSString * _Nullable coupon;
@property (nonatomic, copy) NSString * _Nullable position;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize for testing
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id price:(double)price name:(NSString * _Nonnull)name brand:(NSString * _Nonnull)brand category:(NSString * _Nonnull)category variant:(NSString * _Nonnull)variant quantity:(NSString * _Nonnull)quantity coupon:(NSString * _Nonnull)coupon position:(NSString * _Nonnull)position OBJC_DESIGNATED_INITIALIZER;
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end


SWIFT_CLASS("_TtC9VibesPush8Purchase")
@interface Purchase : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable affiliation;
@property (nonatomic, copy) NSString * _Nullable list;
@property (nonatomic, copy) NSString * _Nullable step;
@property (nonatomic, copy) NSString * _Nullable option;
@property (nonatomic, copy) NSArray<Product *> * _Nullable products;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize for testing
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id affiliation:(NSString * _Nonnull)affiliation revenue:(double)revenue tax:(double)tax shipping:(double)shipping coupon:(double)coupon list:(NSString * _Nonnull)list step:(NSString * _Nonnull)step option:(NSString * _Nonnull)option products:(NSArray<Product *> * _Nonnull)products OBJC_DESIGNATED_INITIALIZER;
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end

typedef SWIFT_ENUM(NSInteger, TrackedEventType, open) {
/// Undefined case, since we parse a string in the convert method
  TrackedEventTypeUndefined = 0,
/// A launch event, tracked when the app is first opened
  TrackedEventTypeLaunch = 1,
/// A clickthru event, tracked when the app is opened from a push
/// notification
  TrackedEventTypeClickthru = 2,
  TrackedEventTypeInboxopen = 3,
  TrackedEventTypeInboxfetch = 4,
};



@protocol VibesAPIDelegate;
@class NSNumber;
@class VibesAppInfo;

/// The main entry point for usage of the Vibes API.
SWIFT_CLASS("_TtC9VibesPush5Vibes")
@interface Vibes : NSObject
/// List of Vibes delegates
@property (nonatomic, weak) id <VibesAPIDelegate> _Nullable delegate;
/// The shared (singleton) instance of Vibes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Vibes * _Null_unspecified shared;)
+ (Vibes * _Null_unspecified)shared SWIFT_WARN_UNUSED_RESULT;
/// The currently set push token, if available. This is stored in local
/// storage.
@property (nonatomic, readonly, copy) NSString * _Nullable pushToken;
/// Add a new Vibes delegate to the list of current delegates.
/// \param delegate VibesAPIDelegate
///
- (void)setWithDelegate:(id <VibesAPIDelegate> _Nonnull)delegate;
/// Enables register push
/// This will result in sending the APNS token to our servers whenever it changes
- (void)enablePush;
/// Disable register push
/// This will result in NOT sending the APNS token to our servers whenever it changes.
/// By calling this, it will be up to the app developer to call registerPush() when appropriate.
- (void)disablePush;
/// Get the status of the device registration
///
/// returns:
/// Boolean
- (BOOL)isDeviceRegistered SWIFT_WARN_UNUSED_RESULT;
/// Get the status of the device push registration
///
/// returns:
/// Boolean
- (BOOL)isDevicePushRegistered SWIFT_WARN_UNUSED_RESULT;
/// Parses the push token from the Data that Apple sends, and stores it
/// locally by converting the data to a hex string. Once this has been called,
/// <code>registerPush</code> can be called at will to enable push notifications from
/// Vibes.
/// \param fromData the data send from Apple and received in your AppDelegateâ€™s
/// <code>application:didRegisterForRemoteNotificationsWithDeviceToken</code> function.
///
- (void)setPushTokenFromData:(NSData * _Nonnull)data;
/// Notify Vibes that a push message has been tapped on or for the case of silent push, has been received.
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     userInfo: the details from the remote notification
///   </li>
///   <li>
///     timestamp: an optional date for the receipt of the push notification
///     (default: now)
///   </li>
/// </ul>
- (void)receivedPushWith:(NSDictionary * _Nonnull)userInfo at:(NSDate * _Nonnull)timestamp;
/// Registers this device with Vibes.
- (void)registerDevice;
/// Unregisters this device with Vibes.
- (void)unregisterDevice;
/// Updates this device with Vibes.
/// \param lat latitude of the User location.
///
/// \param long longitude of the User location
///
/// \param updateCredentials a boolean indicating if itâ€™s a token update or device info update.  Specify <code>false</code> if not certain
///
- (void)updateDeviceWithLat:(NSNumber * _Nullable)lat long:(NSNumber * _Nullable)long_ updateCredentials:(BOOL)updateCredentials;
/// Associate this device with a person
/// <ul>
///   <li>
///     paramters:
///     <ul>
///       <li>
///         externalPersonId: the third party identifier for the person, stored
///         by vibes as external_person_id
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)associatePersonWithExternalPersonId:(NSString * _Nonnull)externalPersonId;
/// Register push notifications for this device with Vibes.
- (void)registerPush;
/// Unregister push notifications for this device with Vibes.
- (void)unregisterPush;
/// Get Vibes Person Information.
/// \param callback GetPersonCallback (Person?, Error?)
///
- (void)getPerson:(void (^ _Nullable)(Person * _Nullable, NSError * _Nullable))callback;
/// Retrieve inbox messages status for an app
/// \param callback GetVibesAppInfoCallback (Status, Error?)
///
- (void)getAppInfo:(void (^ _Nullable)(VibesAppInfo * _Nullable, NSError * _Nullable))callback;
/// Retrieve inbox messages for a Person
/// \param callback GetInboxMessagesCallback ([InboxMessage], Error?)
///
- (void)fetchInboxMessages:(void (^ _Nullable)(NSArray<InboxMessage *> * _Nonnull, NSError * _Nullable))callback;
/// Retrieve a single  inbox message for a Person
/// \param messageUID unique UID for the message to be edited
///
/// \param callback GetInboxMessageCallback (InboxMessage, Error?)
///
- (void)fetchInboxMessageWithMessageUID:(NSString * _Nonnull)messageUID :(void (^ _Nonnull)(InboxMessage * _Nullable, NSError * _Nullable))callback;
/// Mark inbox message as read
/// \param messageUID unique UID for the message to be edited
///
/// \param callback UpdateMessageCallback (InboxMessage?, Error?)
///
- (void)markInboxMessageAsReadWithMessageUID:(NSString * _Nonnull)messageUID :(void (^ _Nonnull)(InboxMessage * _Nullable, NSError * _Nullable))callback;
/// Expire inbox message at specified date
/// \param messageUID unique UID for the message to be edited
///
/// \param date The date to expire the inbox message. if not set, defaults to now.
///
/// \param callback UpdateMessageCallback (InboxMessage?, Error?)
///
- (void)expireInboxMessageWithMessageUID:(NSString * _Nonnull)messageUID date:(NSDate * _Nonnull)date :(void (^ _Nonnull)(InboxMessage * _Nullable, NSError * _Nullable))callback;
/// Records the fact that an inbox message has been viewed in detail by the user.
/// \param inboxMessage The viewed inbox message
///
- (void)onInboxMessageOpenWithInboxMessage:(InboxMessage * _Nonnull)inboxMessage;
/// Records the fact that an inbox messages have been fetched by the user.
- (void)onInboxMessagesFetched;
/// Track CLICK Product Action
/// \param product the product being tracked
///
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackClickWithProduct:(Product * _Nonnull)product activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Track ADD Product Action
/// \param product the product being tracked
///
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackAddWithProduct:(Product * _Nonnull)product activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Track Detail
/// \param product the product being tracked
///
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackDetailWithProduct:(Product * _Nonnull)product activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Get Tracking Data
///
/// returns:
/// VibesTrackingData
- (NSDictionary<NSString *, id> * _Nullable)getTrackingData SWIFT_WARN_UNUSED_RESULT;
/// Track PURCHASE Product Action
/// \param activityUid optional activityUid
///
/// \param completion Completion Callback
///
- (void)trackPurchaseWithPurchase:(Purchase * _Nonnull)purchase activityUid:(NSString * _Nullable)activityUid completion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VibesConfiguration;

@interface Vibes (SWIFT_EXTENSION(VibesPush))
/// Configure the shared Vibes instance. This must be called before using any
/// of the functionality of Vibes, like registering your device.
/// \param appId The Vibes App ID
///
/// \param configuration Contains all the properties to configure Vibes
///
+ (void)configureWithAppId:(NSString * _Nonnull)appId configuration:(VibesConfiguration * _Nullable)configuration;
@end


SWIFT_PROTOCOL("_TtP9VibesPush16VibesAPIDelegate_")
@protocol VibesAPIDelegate
@optional
/// Callback to inform SDK users of the result of the device registration
/// \param deviceId the vibes device id that uniquely identifies the registered device
///
/// \param error Registration device error
///
- (void)didRegisterDeviceWithDeviceId:(NSString * _Nullable)deviceId error:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device unregistration
/// \param error Unregistration device error
///
- (void)didUnregisterDeviceWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device push registration
/// \param error Push registration error
///
- (void)didRegisterPushWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device push unregistration
/// \param error Push unregistration error
///
- (void)didUnregisterPushWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of the device update
/// \param error Device update error
///
- (void)didUpdateDeviceWithError:(NSError * _Nullable)error;
/// Callback to inform SDK users of the result of associating a person with this device
/// \param error Associate person error
///
- (void)didAssociatePersonWithError:(NSError * _Nullable)error;
@end


/// Vibes App Info
SWIFT_CLASS("_TtC9VibesPush12VibesAppInfo")
@interface VibesAppInfo : NSObject
/// Local Atrributes
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
- (NSDictionary<NSString *, id> * _Nonnull)encodeJSON SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
/// An uniqie identifier assosiated with the app
@property (nonatomic, readonly, copy) NSString * _Null_unspecified appId;
/// The app inbox status
@property (nonatomic, readonly) BOOL inboxEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize this object using Attributes
/// \param attributes - The dictionary with attributes
///
- (nullable instancetype)initWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end

enum VibesStorageEnum : NSInteger;
@class NSURL;

SWIFT_CLASS("_TtC9VibesPush18VibesConfiguration")
@interface VibesConfiguration : NSObject
/// A unique advertising identifier for this device
@property (nonatomic, copy) NSString * _Nullable advertisingId;
/// The default URL to hit when talking to the Vibes API
@property (nonatomic, readonly, copy) NSString * _Nonnull apiUrl;
/// The default tracking URL to hit when talking to the Vibes API
@property (nonatomic, copy) NSString * _Nonnull trackingApiUrl;
/// The logger to use.
@property (nonatomic, strong) CombinedLogger * _Nullable logger;
/// Storage to store credential
@property (nonatomic, readonly) enum VibesStorageEnum storageType;
/// Array for Objc interoperability , type of tracking
@property (nonatomic, strong) NSArray * _Nonnull trackedEventTypes;
@property (nonatomic, readonly, copy) NSURL * _Nonnull vibesAPIURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull vibesTrackingAPIURL;
/// Enable Developer Logging which will print logs to the console.
/// \param level The minimum Log level, Default is <code>.verbose</code>
///
- (void)enableDevLoggingWithLevel:(enum LogLevel)level;
/// Disable Developer Logging
- (void)disableDevLogging;
/// Configure paramenters for Vibes instance.
/// \param advertisingId AdSupport.advertisingId. If the application doesnâ€™t
/// support it nil will be sent as value to the backend.
///
/// \param apiUrl An optional URL to hit for accessing for the Vibes API; if not
/// present, the staging URL will be used.
///
/// \param trackingApiUrl An optional URL to hit for accessing for the Vibes Tracking API ; if not
/// present, the staging URL will be used.
///
/// \param logger The logger to use, in addition to<code>ConsoleLogger</code>. if enabled.
/// You can enable console logging with <code>Vibes.shared.configuration.enableDevLogging()</code>
/// and disable with <code>Vibes.shared.configuration.disableDevLogging()</code> at any point.
///
/// \param storageType define the type of storage for storing data locally; if not
/// present, data will be securely stored in the Keychain.
///
/// \param trackedEventTypes NSArray for Objc interoperability , type of tracking
/// events sent to Vibes; if not present, all events type (<code>.launch</code>,
/// <code>.clickthru</code> e.t.c) will be monitored.
///
- (nonnull instancetype)initWithAdvertisingId:(NSString * _Nullable)advertisingId apiUrl:(NSString * _Nullable)apiUrl trackingApiUrl:(NSString * _Nullable)trackingApiUrl logger:(id <VibesLogger> _Nullable)logger storageType:(enum VibesStorageEnum)storageType trackedEventTypes:(NSArray * _Nonnull)trackedEventTypes OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Type of storage to store credential
typedef SWIFT_ENUM(NSInteger, VibesStorageEnum, open) {
  VibesStorageEnumKEYCHAIN = 0,
  VibesStorageEnumUSERDEFAULTS = 1,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
